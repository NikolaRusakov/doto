/**
 * Do-to
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import {Inject, Injectable, Optional} from '@angular/core';
import {
  HttpClient, HttpHeaders, HttpParams,
  HttpResponse, HttpEvent
} from '@angular/common/http';
import {CustomHttpUrlEncodingCodec} from '../encoder';


import {Goal} from '../model/goal';
import {GoalSections} from '../model/goalSections';

import {BASE_PATH, COLLECTION_FORMATS} from '../variables';
import {Configuration} from '../configuration';
import {Observable} from 'rxjs/internal/Observable';


@Injectable()
export class GoalService {

  protected basePath = 'https://localhost/api';
  public defaultHeaders = new HttpHeaders();
  public configuration = new Configuration();

  constructor(protected httpClient: HttpClient, @Optional() @Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
    if (basePath) {
      this.basePath = basePath;
    }
    if (configuration) {
      this.configuration = configuration;
      this.basePath = basePath || configuration.basePath || this.basePath;
    }
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    for (const consume of consumes) {
      if (form === consume) {
        return true;
      }
    }
    return false;
  }


  /**
   * post goal
   * Adds goal
   * @param section
   * @param content
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public goalPost(section: GoalSections, content: Goal, observe?: 'body', reportProgress?: boolean): Observable<Goal>;
  public goalPost(section: GoalSections, content: Goal, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Goal>>;
  public goalPost(section: GoalSections, content: Goal, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Goal>>;
  public goalPost(section: GoalSections, content: Goal, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (section === null || section === undefined) {
      throw new Error('Required parameter section was null or undefined when calling goalPost.');
    }

    if (content === null || content === undefined) {
      throw new Error('Required parameter content was null or undefined when calling goalPost.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];
    const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers = headers.set('Content-Type', httpContentTypeSelected);
    }

    return this.httpClient.post<Goal>(`${this.basePath}/goal/${encodeURIComponent(String(section))}`,
      content,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * goal by single section selected
   *
   * @param section
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public goalsSection(section: GoalSections, observe?: 'body', reportProgress?: boolean): Observable<Goal>;
  public goalsSection(section: GoalSections, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Goal>>;
  public goalsSection(section: GoalSections, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Goal>>;
  public goalsSection(section: GoalSections, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (section === null || section === undefined) {
      throw new Error('Required parameter section was null or undefined when calling goalsSection.');
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Goal>(`${this.basePath}/goals/${encodeURIComponent(String(section))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

  /**
   * multiple goals by section
   *
   * @param sections
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public goalsSectionQuery(sections: GoalSections, observe?: 'body', reportProgress?: boolean): Observable<Goal>;
  public goalsSectionQuery(sections: GoalSections, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Goal>>;
  public goalsSectionQuery(sections: GoalSections, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Goal>>;
  public goalsSectionQuery(sections: GoalSections, observe: any = 'body', reportProgress: boolean = false): Observable<any> {

    if (sections === null || sections === undefined) {
      throw new Error('Required parameter sections was null or undefined when calling goalsSectionQuery.');
    }

    let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
    if (sections !== undefined && sections !== null) {
      queryParameters = queryParameters.set('sections', <any>sections);
    }

    let headers = this.defaultHeaders;

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [
      'application/json'
    ];
    const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers = headers.set('Accept', httpHeaderAcceptSelected);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    return this.httpClient.get<Goal>(`${this.basePath}/goals`,
      {
        params: queryParameters,
        withCredentials: this.configuration.withCredentials,
        headers: headers,
        observe: observe,
        reportProgress: reportProgress
      }
    );
  }

}
