// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Direction direction
// swagger:model Direction
type Direction struct {

	// direction
	// Enum: [default unidirectional bidirectional]
	Direction string `json:"direction,omitempty"`

	// from
	From string `json:"from,omitempty"`

	// to
	To string `json:"to,omitempty"`
}

// Validate validates this direction
func (m *Direction) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var directionTypeDirectionPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["default","unidirectional","bidirectional"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		directionTypeDirectionPropEnum = append(directionTypeDirectionPropEnum, v)
	}
}

const (

	// DirectionDirectionDefault captures enum value "default"
	DirectionDirectionDefault string = "default"

	// DirectionDirectionUnidirectional captures enum value "unidirectional"
	DirectionDirectionUnidirectional string = "unidirectional"

	// DirectionDirectionBidirectional captures enum value "bidirectional"
	DirectionDirectionBidirectional string = "bidirectional"
)

// prop value enum
func (m *Direction) validateDirectionEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, directionTypeDirectionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *Direction) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectionEnum("direction", "body", m.Direction); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Direction) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Direction) UnmarshalBinary(b []byte) error {
	var res Direction
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
