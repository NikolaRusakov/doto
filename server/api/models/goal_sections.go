// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// GoalSections goal sections
// swagger:model Goal_sections
type GoalSections string

const (

	// GoalSectionsProductivity captures enum value "productivity"
	GoalSectionsProductivity GoalSections = "productivity"

	// GoalSectionsTodo captures enum value "todo"
	GoalSectionsTodo GoalSections = "todo"

	// GoalSectionsEnhancement captures enum value "enhancement"
	GoalSectionsEnhancement GoalSections = "enhancement"

	// GoalSectionsProficiency captures enum value "proficiency"
	GoalSectionsProficiency GoalSections = "proficiency"
)

// for schema
var goalSectionsEnum []interface{}

func init() {
	var res []GoalSections
	if err := json.Unmarshal([]byte(`["productivity","todo","enhancement","proficiency"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		goalSectionsEnum = append(goalSectionsEnum, v)
	}
}

func (m GoalSections) validateGoalSectionsEnum(path, location string, value GoalSections) error {
	if err := validate.Enum(path, location, value, goalSectionsEnum); err != nil {
		return err
	}
	return nil
}

// Validate validates this goal sections
func (m GoalSections) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateGoalSectionsEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
