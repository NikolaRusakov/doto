// Code generated by go-swagger; DO NOT EDIT.

package goal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGoalsSectionParams creates a new GoalsSectionParams object
// no default values defined in spec.
func NewGoalsSectionParams() GoalsSectionParams {

	return GoalsSectionParams{}
}

// GoalsSectionParams contains all the bound params for the goals section operation
// typically these are obtained from a http.Request
//
// swagger:parameters goals-section
type GoalsSectionParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	Section []string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewGoalsSectionParams() beforehand.
func (o *GoalsSectionParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	rSection, rhkSection, _ := route.Params.GetOK("section")
	if err := o.bindSection(rSection, rhkSection, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindSection binds and validates array parameter Section from path.
//
// Arrays are parsed according to CollectionFormat: "" (defaults to "csv" when empty).
func (o *GoalsSectionParams) bindSection(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("section", "path")
	}

	var qvSection string
	if len(rawData) > 0 {
		qvSection = rawData[len(rawData)-1]
	}

	// CollectionFormat:
	sectionIC := swag.SplitByFormat(qvSection, "")

	if len(sectionIC) == 0 {
		return errors.Required("section", "path")
	}

	var sectionIR []string
	for i, sectionIV := range sectionIC {
		sectionI := sectionIV

		if err := validate.Enum(fmt.Sprintf("%s.%v", "section", i), "path", sectionI, []interface{}{"productivity", "todo", "enhancement", "proficiency"}); err != nil {
			return err
		}

		sectionIR = append(sectionIR, sectionI)
	}

	o.Section = sectionIR

	return nil
}
