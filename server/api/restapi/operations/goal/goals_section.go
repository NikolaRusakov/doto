// Code generated by go-swagger; DO NOT EDIT.

package goal

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GoalsSectionHandlerFunc turns a function with the right signature into a goals section handler
type GoalsSectionHandlerFunc func(GoalsSectionParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GoalsSectionHandlerFunc) Handle(params GoalsSectionParams) middleware.Responder {
	return fn(params)
}

// GoalsSectionHandler interface for that can handle valid goals section params
type GoalsSectionHandler interface {
	Handle(GoalsSectionParams) middleware.Responder
}

// NewGoalsSection creates a new http.Handler for the goals section operation
func NewGoalsSection(ctx *middleware.Context, handler GoalsSectionHandler) *GoalsSection {
	return &GoalsSection{Context: ctx, Handler: handler}
}

/*GoalsSection swagger:route GET /goals/{section} Goal goalsSection

goal by single section selected

*/
type GoalsSection struct {
	Context *middleware.Context
	Handler GoalsSectionHandler
}

func (o *GoalsSection) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGoalsSectionParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
